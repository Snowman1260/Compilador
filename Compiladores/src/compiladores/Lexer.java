/* The following code was generated by JFlex 1.6.1 */

package compiladores;;                 /*IMPORTACIONES*/
import static compiladores.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/stevi/Documents/NetBeansProjects/Compiladores/src/compiladores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\55\1\60\1\60\1\57\22\0\1\56\1\6\3\0"+
    "\1\3\1\10\1\0\1\14\1\15\1\4\1\3\1\3\1\3\1\3"+
    "\1\5\1\52\11\2\1\0\1\3\1\6\1\7\1\6\2\0\1\50"+
    "\5\54\7\1\1\47\11\1\1\53\2\1\1\12\1\0\1\13\1\0"+
    "\1\20\1\0\1\37\1\30\1\36\1\24\1\32\1\40\1\35\1\41"+
    "\1\23\1\1\1\46\1\31\1\43\1\25\1\22\1\44\1\1\1\34"+
    "\1\33\1\26\1\27\1\21\1\45\1\42\1\51\1\1\1\16\1\11"+
    "\1\17\7\0\1\60\u1fa2\0\1\60\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\2\1\3\4\15\2"+
    "\1\3\1\5\1\6\1\2\2\0\2\2\1\7\16\2"+
    "\1\0\1\2\2\0\1\3\2\0\1\2\1\7\12\2"+
    "\1\7\1\2\1\7\1\10\1\2\1\11\1\3\1\11"+
    "\1\7\16\2\1\7\7\2\1\7\5\2\1\7\4\2"+
    "\1\7\1\2\1\7\2\2\1\7\25\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\61\0\61\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u04c9\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u052b\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u089d\0\u0bde\0\u0c0f\0\u086c\0\u0c40"+
    "\0\61\0\u08ff\0\u08ff\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0e5b\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u0fe3\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u10d8\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u119c\0\u122f\0\u122f"+
    "\0\u1260\0\u1291\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\2\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\5\1\14\1\5\1\2\1\15"+
    "\1\3\1\16\1\17\1\20\1\21\1\3\1\22\1\3"+
    "\1\23\1\24\1\25\1\3\1\26\1\3\1\27\4\3"+
    "\1\30\1\3\1\31\2\3\1\32\2\3\1\33\2\34"+
    "\63\0\2\35\15\0\35\35\6\0\1\4\47\0\1\4"+
    "\10\0\1\4\1\0\1\36\1\37\44\0\1\4\10\0"+
    "\1\4\4\0\1\5\42\0\1\4\16\0\1\5\61\0"+
    "\1\5\51\0\1\4\10\0\1\5\36\0\1\4\10\0"+
    "\1\4\12\0\1\5\34\0\1\4\10\0\1\4\14\0"+
    "\1\5\32\0\1\4\7\0\2\35\15\0\2\35\1\40"+
    "\32\35\5\0\2\35\15\0\5\35\1\41\12\35\1\42"+
    "\2\35\1\43\11\35\5\0\2\35\15\0\2\35\1\44"+
    "\32\35\5\0\2\35\15\0\7\35\1\45\25\35\5\0"+
    "\2\35\15\0\21\35\1\46\13\35\5\0\2\35\15\0"+
    "\2\35\1\47\11\35\1\50\20\35\5\0\2\35\15\0"+
    "\11\35\1\51\10\35\1\52\12\35\5\0\2\35\15\0"+
    "\6\35\1\53\26\35\5\0\2\35\15\0\12\35\1\54"+
    "\22\35\5\0\2\35\15\0\11\35\1\55\23\35\5\0"+
    "\2\35\15\0\2\35\1\56\32\35\5\0\2\35\15\0"+
    "\21\35\1\57\13\35\5\0\2\35\15\0\12\35\1\60"+
    "\22\35\6\0\1\4\37\0\1\61\7\0\1\4\1\61"+
    "\6\0\2\62\15\0\35\62\5\0\2\36\1\0\1\63"+
    "\13\0\40\36\1\0\1\64\1\37\1\65\2\64\1\66"+
    "\12\64\32\37\1\65\2\37\1\0\1\37\1\67\2\0"+
    "\2\62\15\0\3\62\1\70\31\62\5\0\2\62\15\0"+
    "\6\62\1\71\26\62\5\0\2\62\15\0\24\62\1\72"+
    "\10\62\5\0\2\62\15\0\7\62\1\73\25\62\5\0"+
    "\2\62\15\0\11\62\1\74\23\62\5\0\2\62\15\0"+
    "\3\62\1\75\31\62\5\0\2\62\15\0\2\62\1\74"+
    "\32\62\5\0\2\62\15\0\12\62\1\76\22\62\5\0"+
    "\2\62\15\0\13\62\1\77\21\62\5\0\2\62\15\0"+
    "\6\62\1\100\26\62\5\0\2\62\15\0\14\62\1\101"+
    "\20\62\5\0\2\62\15\0\6\62\1\102\26\62\5\0"+
    "\2\62\15\0\17\62\1\103\15\62\5\0\2\62\15\0"+
    "\14\62\1\104\20\62\5\0\2\62\15\0\3\62\1\105"+
    "\31\62\5\0\2\62\15\0\25\62\1\106\7\62\6\0"+
    "\1\107\21\0\1\107\3\0\1\107\1\0\1\107\3\0"+
    "\3\107\7\0\1\107\1\0\1\107\1\0\1\107\5\0"+
    "\2\110\15\0\35\110\11\0\1\111\53\0\2\64\1\112"+
    "\47\64\1\112\2\64\1\0\1\64\2\0\2\64\1\112"+
    "\2\64\1\113\44\64\1\112\2\64\1\0\1\64\3\0"+
    "\2\67\2\0\1\63\12\0\35\67\1\0\2\67\2\0"+
    "\2\110\15\0\4\110\1\114\30\110\5\0\2\110\15\0"+
    "\12\110\1\115\22\110\5\0\2\110\15\0\11\110\1\116"+
    "\23\110\5\0\2\110\15\0\10\110\1\117\24\110\5\0"+
    "\2\110\15\0\11\110\1\114\23\110\5\0\2\110\15\0"+
    "\13\110\1\114\21\110\5\0\2\110\15\0\17\110\1\120"+
    "\15\110\5\0\2\110\15\0\12\110\1\114\22\110\5\0"+
    "\2\110\15\0\12\110\1\121\22\110\5\0\2\110\15\0"+
    "\3\110\1\122\31\110\5\0\2\110\15\0\7\110\1\123"+
    "\25\110\5\0\2\110\15\0\13\110\1\124\21\110\5\0"+
    "\2\110\15\0\11\110\1\125\23\110\5\0\2\110\15\0"+
    "\30\110\1\126\4\110\5\0\2\127\15\0\35\127\5\0"+
    "\2\127\15\0\14\127\1\130\20\127\5\0\2\127\15\0"+
    "\12\127\1\131\22\127\5\0\2\127\15\0\11\127\1\132"+
    "\23\127\5\0\2\127\15\0\26\127\1\133\6\127\5\0"+
    "\2\127\15\0\5\127\1\134\27\127\5\0\2\127\15\0"+
    "\5\127\1\135\27\127\5\0\2\127\15\0\14\127\1\136"+
    "\20\127\5\0\2\127\15\0\13\127\1\133\21\127\5\0"+
    "\2\127\15\0\12\127\1\133\22\127\5\0\2\127\15\0"+
    "\14\127\1\137\20\127\5\0\2\140\15\0\35\140\5\0"+
    "\2\140\15\0\20\140\1\141\14\140\5\0\2\140\15\0"+
    "\23\140\1\142\11\140\5\0\2\140\15\0\12\140\1\143"+
    "\22\140\5\0\2\140\15\0\4\140\1\144\30\140\5\0"+
    "\2\140\15\0\15\140\1\143\17\140\5\0\2\140\15\0"+
    "\5\140\1\143\27\140\5\0\2\140\15\0\14\140\1\145"+
    "\20\140\5\0\2\146\15\0\35\146\5\0\2\146\15\0"+
    "\17\146\1\147\15\146\5\0\2\146\15\0\12\146\1\150"+
    "\22\146\5\0\2\146\15\0\13\146\1\151\21\146\5\0"+
    "\2\146\15\0\17\146\1\152\15\146\5\0\2\153\15\0"+
    "\35\153\5\0\2\153\15\0\16\153\1\154\16\153\5\0"+
    "\2\153\15\0\5\153\1\155\27\153\5\0\2\153\15\0"+
    "\31\153\1\156\3\153\5\0\2\157\15\0\35\157\5\0"+
    "\2\157\15\0\12\157\1\160\22\157\5\0\2\157\15\0"+
    "\6\157\1\161\26\157\5\0\2\162\15\0\35\162\5\0"+
    "\2\162\15\0\13\162\1\163\21\162\5\0\2\164\15\0"+
    "\35\164\5\0\2\165\15\0\35\165\5\0\2\166\15\0"+
    "\35\166\5\0\2\167\15\0\35\167\5\0\2\170\15\0"+
    "\35\170\5\0\2\171\15\0\35\171\5\0\2\172\15\0"+
    "\35\172\5\0\2\173\15\0\35\173\5\0\2\174\15\0"+
    "\35\174\5\0\2\175\15\0\35\175\5\0\2\176\15\0"+
    "\35\176\5\0\2\177\15\0\35\177\5\0\2\200\15\0"+
    "\35\200\5\0\2\201\15\0\35\201\5\0\2\202\15\0"+
    "\35\202\5\0\2\203\15\0\35\203\5\0\2\204\15\0"+
    "\35\204\5\0\2\205\15\0\35\205\5\0\2\206\15\0"+
    "\35\206\5\0\2\207\15\0\35\207\5\0\2\210\15\0"+
    "\35\210\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5782];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\2\11\1\1\2\0\21\1\1\0"+
    "\1\1\2\0\1\1\2\0\21\1\1\11\76\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 10: break;
          case 2: 
            { lexeme=yytext(); return IDENTIFICADOR;
            }
          case 11: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 12: break;
          case 4: 
            { lexeme=yytext(); return SIGNO;
            }
          case 13: break;
          case 5: 
            { lexeme=yytext(); return ENTER;
            }
          case 14: break;
          case 6: 
            { lexeme=yytext(); return WHITE;
            }
          case 15: break;
          case 7: 
            { lexeme=yytext(); return PRESERVADA;
            }
          case 16: break;
          case 8: 
            { lexeme=yytext(); return CONSTANTES;
            }
          case 17: break;
          case 9: 
            { lexeme=yytext(); return COMENTARIO;
            }
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
