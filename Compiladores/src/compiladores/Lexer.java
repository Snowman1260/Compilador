/* The following code was generated by JFlex 1.6.1 */

package compiladores;;                 /*IMPORTACIONES*/
import static compiladores.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/stevi/Documents/NetBeansProjects/Compiladores/src/compiladores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\56\1\61\1\61\1\60\22\0\1\57\1\6\3\0"+
    "\1\3\1\10\1\0\1\15\1\16\1\4\1\3\1\3\1\3\1\12"+
    "\1\5\1\53\11\2\1\0\1\3\1\6\1\7\1\6\2\0\1\51"+
    "\5\55\7\1\1\50\11\1\1\54\2\1\1\13\1\0\1\14\1\0"+
    "\1\21\1\0\1\40\1\31\1\37\1\25\1\33\1\41\1\36\1\42"+
    "\1\24\1\1\1\47\1\32\1\44\1\26\1\23\1\45\1\1\1\35"+
    "\1\34\1\27\1\30\1\22\1\46\1\43\1\52\1\1\1\17\1\11"+
    "\1\20\7\0\1\61\u1fa2\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\2\1\3\4\15\2"+
    "\1\3\1\5\1\6\1\2\1\0\1\7\2\2\1\10"+
    "\16\2\1\0\1\2\2\0\1\3\1\7\1\2\1\10"+
    "\12\2\1\10\1\2\1\10\1\11\1\2\1\7\1\3"+
    "\1\10\16\2\1\10\7\2\1\10\5\2\1\10\4\2"+
    "\1\10\1\2\1\10\2\2\1\10\25\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\226\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\62\0\62\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u04e2\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0546\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u08ca\0\u0bea\0\u0c1c\0\u0898\0\u0c4e\0\u0514"+
    "\0\u092e\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0e74\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u1004\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u10fe\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u11c6\0\u125c\0\u125c\0\u128e\0\u12c0"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\2\7\1\10\1\11"+
    "\1\5\1\12\1\5\1\13\1\5\1\14\1\5\1\2"+
    "\1\15\1\3\1\16\1\17\1\20\1\21\1\3\1\22"+
    "\1\3\1\23\1\24\1\25\1\3\1\26\1\3\1\27"+
    "\4\3\1\30\1\3\1\31\2\3\1\32\2\3\1\33"+
    "\2\34\64\0\2\35\16\0\35\35\6\0\1\4\50\0"+
    "\1\4\10\0\1\4\1\0\1\36\1\37\45\0\1\4"+
    "\10\0\1\4\4\0\1\5\43\0\1\4\16\0\1\5"+
    "\62\0\1\5\52\0\1\4\11\0\1\5\36\0\1\4"+
    "\10\0\1\4\13\0\1\5\34\0\1\4\10\0\1\4"+
    "\15\0\1\5\32\0\1\4\7\0\2\35\16\0\2\35"+
    "\1\40\32\35\5\0\2\35\16\0\5\35\1\41\12\35"+
    "\1\42\2\35\1\43\11\35\5\0\2\35\16\0\2\35"+
    "\1\44\32\35\5\0\2\35\16\0\7\35\1\45\25\35"+
    "\5\0\2\35\16\0\21\35\1\46\13\35\5\0\2\35"+
    "\16\0\2\35\1\47\11\35\1\50\20\35\5\0\2\35"+
    "\16\0\11\35\1\51\10\35\1\52\12\35\5\0\2\35"+
    "\16\0\6\35\1\53\26\35\5\0\2\35\16\0\12\35"+
    "\1\54\22\35\5\0\2\35\16\0\11\35\1\55\23\35"+
    "\5\0\2\35\16\0\2\35\1\56\32\35\5\0\2\35"+
    "\16\0\21\35\1\57\13\35\5\0\2\35\16\0\12\35"+
    "\1\60\22\35\6\0\1\4\40\0\1\61\7\0\1\4"+
    "\1\61\6\0\2\62\16\0\35\62\4\0\4\36\1\63"+
    "\5\36\1\0\47\36\1\64\1\37\1\65\16\64\32\37"+
    "\1\65\2\37\1\0\1\37\1\66\2\0\2\62\16\0"+
    "\3\62\1\67\31\62\5\0\2\62\16\0\6\62\1\70"+
    "\26\62\5\0\2\62\16\0\24\62\1\71\10\62\5\0"+
    "\2\62\16\0\7\62\1\72\25\62\5\0\2\62\16\0"+
    "\11\62\1\73\23\62\5\0\2\62\16\0\3\62\1\74"+
    "\31\62\5\0\2\62\16\0\2\62\1\73\32\62\5\0"+
    "\2\62\16\0\12\62\1\75\22\62\5\0\2\62\16\0"+
    "\13\62\1\76\21\62\5\0\2\62\16\0\6\62\1\77"+
    "\26\62\5\0\2\62\16\0\14\62\1\100\20\62\5\0"+
    "\2\62\16\0\6\62\1\101\26\62\5\0\2\62\16\0"+
    "\17\62\1\102\15\62\5\0\2\62\16\0\14\62\1\103"+
    "\20\62\5\0\2\62\16\0\3\62\1\104\31\62\5\0"+
    "\2\62\16\0\25\62\1\105\7\62\6\0\1\106\22\0"+
    "\1\106\3\0\1\106\1\0\1\106\3\0\3\106\7\0"+
    "\1\106\1\0\1\106\1\0\1\106\5\0\2\107\16\0"+
    "\35\107\4\0\4\36\1\63\1\110\4\36\1\0\47\36"+
    "\2\64\1\111\50\64\1\111\2\64\1\0\1\64\3\0"+
    "\2\66\16\0\35\66\1\0\2\66\2\0\2\107\16\0"+
    "\4\107\1\112\30\107\5\0\2\107\16\0\12\107\1\113"+
    "\22\107\5\0\2\107\16\0\11\107\1\114\23\107\5\0"+
    "\2\107\16\0\10\107\1\115\24\107\5\0\2\107\16\0"+
    "\11\107\1\112\23\107\5\0\2\107\16\0\13\107\1\112"+
    "\21\107\5\0\2\107\16\0\17\107\1\116\15\107\5\0"+
    "\2\107\16\0\12\107\1\112\22\107\5\0\2\107\16\0"+
    "\12\107\1\117\22\107\5\0\2\107\16\0\3\107\1\120"+
    "\31\107\5\0\2\107\16\0\7\107\1\121\25\107\5\0"+
    "\2\107\16\0\13\107\1\122\21\107\5\0\2\107\16\0"+
    "\11\107\1\123\23\107\5\0\2\107\16\0\30\107\1\124"+
    "\4\107\5\0\2\125\16\0\35\125\5\0\2\125\16\0"+
    "\14\125\1\126\20\125\5\0\2\125\16\0\12\125\1\127"+
    "\22\125\5\0\2\125\16\0\11\125\1\130\23\125\5\0"+
    "\2\125\16\0\26\125\1\131\6\125\5\0\2\125\16\0"+
    "\5\125\1\132\27\125\5\0\2\125\16\0\5\125\1\133"+
    "\27\125\5\0\2\125\16\0\14\125\1\134\20\125\5\0"+
    "\2\125\16\0\13\125\1\131\21\125\5\0\2\125\16\0"+
    "\12\125\1\131\22\125\5\0\2\125\16\0\14\125\1\135"+
    "\20\125\5\0\2\136\16\0\35\136\5\0\2\136\16\0"+
    "\20\136\1\137\14\136\5\0\2\136\16\0\23\136\1\140"+
    "\11\136\5\0\2\136\16\0\12\136\1\141\22\136\5\0"+
    "\2\136\16\0\4\136\1\142\30\136\5\0\2\136\16\0"+
    "\15\136\1\141\17\136\5\0\2\136\16\0\5\136\1\141"+
    "\27\136\5\0\2\136\16\0\14\136\1\143\20\136\5\0"+
    "\2\144\16\0\35\144\5\0\2\144\16\0\17\144\1\145"+
    "\15\144\5\0\2\144\16\0\12\144\1\146\22\144\5\0"+
    "\2\144\16\0\13\144\1\147\21\144\5\0\2\144\16\0"+
    "\17\144\1\150\15\144\5\0\2\151\16\0\35\151\5\0"+
    "\2\151\16\0\16\151\1\152\16\151\5\0\2\151\16\0"+
    "\5\151\1\153\27\151\5\0\2\151\16\0\31\151\1\154"+
    "\3\151\5\0\2\155\16\0\35\155\5\0\2\155\16\0"+
    "\12\155\1\156\22\155\5\0\2\155\16\0\6\155\1\157"+
    "\26\155\5\0\2\160\16\0\35\160\5\0\2\160\16\0"+
    "\13\160\1\161\21\160\5\0\2\162\16\0\35\162\5\0"+
    "\2\163\16\0\35\163\5\0\2\164\16\0\35\164\5\0"+
    "\2\165\16\0\35\165\5\0\2\166\16\0\35\166\5\0"+
    "\2\167\16\0\35\167\5\0\2\170\16\0\35\170\5\0"+
    "\2\171\16\0\35\171\5\0\2\172\16\0\35\172\5\0"+
    "\2\173\16\0\35\173\5\0\2\174\16\0\35\174\5\0"+
    "\2\175\16\0\35\175\5\0\2\176\16\0\35\176\5\0"+
    "\2\177\16\0\35\177\5\0\2\200\16\0\35\200\5\0"+
    "\2\201\16\0\35\201\5\0\2\202\16\0\35\202\5\0"+
    "\2\203\16\0\35\203\5\0\2\204\16\0\35\204\5\0"+
    "\2\205\16\0\35\205\5\0\2\206\16\0\35\206\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\2\11\1\1\1\0\22\1\1\0"+
    "\1\1\2\0\121\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 10: break;
          case 2: 
            { lexeme=yytext(); return IDENTIFICADOR;
            }
          case 11: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 12: break;
          case 4: 
            { lexeme=yytext(); return SIGNO;
            }
          case 13: break;
          case 5: 
            { lexeme=yytext(); return ENTER;
            }
          case 14: break;
          case 6: 
            { lexeme=yytext(); return WHITE;
            }
          case 15: break;
          case 7: 
            { lexeme=yytext(); return COMENTARIO;
            }
          case 16: break;
          case 8: 
            { lexeme=yytext(); return PRESERVADA;
            }
          case 17: break;
          case 9: 
            { lexeme=yytext(); return CONSTANTES;
            }
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
