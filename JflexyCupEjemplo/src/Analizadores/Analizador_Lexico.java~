/* The following code was generated by JFlex 1.6.1 */

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/*------------  2da Area: Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizadores/A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 53, 51, 54, 53, 53,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    53, 17, 50,  0,  0, 14, 18,  0,  5,  6, 12, 10, 21, 11, 22, 13, 
    52,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 20, 15,  9, 16,  0, 
     0, 26, 38, 37, 29, 24, 47, 33, 48, 31,  2, 40, 34, 35, 23, 36, 
    46,  2, 27, 43, 32, 41, 44, 25, 45, 28,  2,  3,  0,  4,  0, 49, 
     0, 26, 38, 37, 29, 24, 47, 33, 48, 31,  2, 40, 34, 35, 23, 36, 
    46,  2, 27, 43, 32, 41, 44, 25, 45, 28,  2,  7, 19,  8,  0,  0, 
     0,  0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\1\1\23\1\24\1\25\5\3"+
    "\1\1\5\3\1\1\3\3\1\26\1\1\1\27\1\2"+
    "\1\30\1\31\1\32\2\0\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\7\3\3\0\1\41\3\3\1\41\5\3"+
    "\1\0\4\3\1\0\1\42\3\0\1\43\1\3\1\0"+
    "\2\3\1\0\4\3\1\44\2\0\1\44\2\3\1\0"+
    "\5\3\1\0\1\3\1\0\2\3\1\45\1\46\1\30"+
    "\1\0\1\47\1\3\1\50\2\51\1\3\1\0\4\3"+
    "\3\0\3\3\2\52\1\3\1\0\2\3\1\53\1\0"+
    "\1\3\2\54\1\0\2\3\2\55\1\0\4\3\1\0"+
    "\1\56\1\0\1\3\1\56\2\3\2\57\2\60\1\0"+
    "\1\3\1\61\2\3\1\0\1\3\1\0\1\3\1\62"+
    "\1\63\2\0\2\3\1\64\2\65\1\3\2\66\1\0"+
    "\1\3\1\0\1\3\2\0\2\3\1\67\1\0\1\3"+
    "\2\70\2\0\2\3\1\0\1\3\1\71\1\0\1\71"+
    "\1\3\1\0\1\3\2\72\2\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\67\0\u0113\0\67"+
    "\0\u014a\0\67\0\u0181\0\u01b8\0\u01b8\0\67\0\u01ef\0\67"+
    "\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\67\0\67\0\67"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\67"+
    "\0\u0672\0\67\0\u06a9\0\u06e0\0\67\0\67\0\u0717\0\u074e"+
    "\0\u0785\0\67\0\67\0\67\0\67\0\67\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab"+
    "\0\67\0\u09e2\0\u0a19\0\u0a50\0\245\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0672"+
    "\0\u0672\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\245"+
    "\0\u0cad\0\u131f\0\u131f\0\67\0\u1356\0\245\0\67\0\245"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\67\0\245\0\u1621\0\u1658"+
    "\0\u168f\0\u16c6\0\245\0\u16fd\0\u1734\0\67\0\245\0\u176b"+
    "\0\u17a2\0\u17d9\0\67\0\245\0\u1810\0\u1847\0\u187e\0\u18b5"+
    "\0\u18ec\0\u1923\0\67\0\u195a\0\u1991\0\245\0\u19c8\0\u19ff"+
    "\0\67\0\245\0\67\0\245\0\u1a36\0\u1a6d\0\67\0\u1aa4"+
    "\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\245\0\245\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\245\0\67\0\245\0\u1cca\0\67"+
    "\0\245\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u1e82\0\245\0\u1eb9\0\u1ef0\0\67\0\245\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\67\0\u2071\0\245\0\u20a8"+
    "\0\u20df\0\u2116\0\67\0\245\0\67\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\4\1\34\1\4\1\35\1\36\1\37"+
    "\1\40\2\4\1\41\1\4\1\42\1\43\1\2\2\4"+
    "\1\44\1\45\1\46\2\4\1\47\1\4\1\50\1\51"+
    "\1\52\1\53\1\52\71\0\1\3\24\0\1\54\35\0"+
    "\1\3\3\0\2\4\24\0\7\4\1\0\10\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\6\0\1\55\70\0"+
    "\1\55\70\0\1\55\67\0\1\56\56\0\1\57\62\0"+
    "\1\57\16\0\1\60\1\61\62\0\1\62\66\0\1\63"+
    "\66\0\1\64\77\0\1\65\67\0\1\66\44\0\2\4"+
    "\24\0\1\4\1\67\5\4\1\0\10\4\1\0\1\4"+
    "\1\70\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\7\4\1\0\3\4\1\71\4\4\1\0\2\4\1\0"+
    "\2\4\1\72\4\4\2\0\1\4\3\0\2\4\24\0"+
    "\7\4\1\0\10\4\1\0\2\4\1\0\5\4\1\73"+
    "\1\4\2\0\1\4\3\0\2\4\24\0\1\4\1\74"+
    "\5\4\1\0\10\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\3\0\2\4\24\0\7\4\1\0\5\4\1\75"+
    "\2\4\1\0\2\4\1\0\7\4\2\0\1\4\31\0"+
    "\1\76\5\0\1\77\5\0\1\100\13\0\1\101\10\0"+
    "\2\4\24\0\1\102\5\4\1\103\1\0\4\4\1\104"+
    "\3\4\1\0\2\4\1\0\4\4\1\105\2\4\2\0"+
    "\1\4\3\0\2\4\24\0\7\4\1\0\10\4\1\0"+
    "\2\4\1\0\5\4\1\106\1\4\2\0\1\4\3\0"+
    "\2\4\24\0\3\4\1\107\3\4\1\0\10\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\7\4\1\0\3\4\1\110\4\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\3\0\2\4\24\0\4\4\1\111"+
    "\2\4\1\0\5\4\1\112\2\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\42\0\1\113\27\0\2\4\24\0"+
    "\7\4\1\0\1\4\1\114\6\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\3\0\2\4\24\0\7\4\1\0"+
    "\5\4\1\115\2\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\3\0\2\4\24\0\3\4\1\116\3\4\1\0"+
    "\5\4\1\117\2\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\2\0\62\120\1\121\1\0\3\120\1\0\1\3"+
    "\24\0\1\54\26\0\1\122\6\0\1\3\3\0\1\54"+
    "\26\0\1\123\33\0\1\54\3\0\1\57\24\0\1\54"+
    "\35\0\1\57\2\0\14\60\1\124\52\60\63\61\1\0"+
    "\3\61\1\0\2\4\24\0\2\4\1\125\4\4\1\0"+
    "\10\4\1\0\2\4\1\0\7\4\2\0\1\4\3\0"+
    "\2\4\24\0\7\4\1\0\3\4\1\126\4\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\7\4\1\0\10\4\1\0\2\4\1\127\1\130\6\4"+
    "\2\0\1\4\3\0\2\4\24\0\7\4\1\0\1\4"+
    "\1\131\6\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\3\0\2\4\24\0\7\4\1\132\1\133\7\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\3\4\1\134\3\4\1\0\1\4\1\135\6\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\7\4\1\0\10\4\1\0\1\4\1\136\1\0\7\4"+
    "\2\0\1\4\42\0\1\137\56\0\1\140\114\0\1\141"+
    "\11\0\2\4\24\0\7\4\1\0\1\4\1\142\6\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\3\0\2\4"+
    "\24\0\1\4\1\143\5\4\1\0\10\4\1\0\2\4"+
    "\1\0\7\4\2\0\1\4\3\0\2\4\24\0\7\4"+
    "\1\0\10\4\1\0\2\4\1\0\3\4\1\144\3\4"+
    "\2\0\1\4\3\0\2\4\24\0\7\4\1\145\1\146"+
    "\7\4\1\0\2\4\1\0\7\4\2\0\1\4\3\0"+
    "\2\4\24\0\7\4\1\0\3\4\1\147\4\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\3\4\1\150\3\4\1\0\10\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\3\0\2\4\24\0\1\4\1\151"+
    "\5\4\1\0\10\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\3\0\2\4\24\0\7\4\1\0\5\4\1\152"+
    "\2\4\1\0\2\4\1\0\7\4\2\0\1\4\35\0"+
    "\1\153\34\0\2\4\24\0\4\4\1\154\2\4\1\0"+
    "\10\4\1\0\2\4\1\0\7\4\2\0\1\4\3\0"+
    "\2\4\24\0\7\4\1\155\1\156\7\4\1\0\2\4"+
    "\1\0\7\4\2\0\1\4\3\0\2\4\24\0\7\4"+
    "\1\0\3\4\1\157\4\4\1\0\2\4\1\0\7\4"+
    "\2\0\1\4\3\0\2\4\24\0\4\4\1\160\2\4"+
    "\1\0\10\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\3\0\1\161\26\0\1\161\1\0\1\161\2\0\1\161"+
    "\7\0\2\161\10\0\1\161\4\0\1\161\3\0\1\162"+
    "\10\0\2\163\50\0\1\162\2\0\14\60\1\124\1\164"+
    "\51\60\1\0\2\4\24\0\3\4\1\165\3\4\1\0"+
    "\10\4\1\0\2\4\1\0\7\4\2\0\1\4\3\0"+
    "\2\4\24\0\7\4\1\0\3\4\1\166\4\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\32\0\1\167\37\0"+
    "\2\4\24\0\1\4\1\170\5\4\1\0\10\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\1\4\1\171\5\4\1\0\10\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\44\0\1\172\25\0\2\4\24\0"+
    "\7\4\1\0\3\4\1\173\4\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\3\0\2\4\24\0\6\4\1\174"+
    "\1\0\10\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\3\0\2\4\24\0\7\4\1\0\10\4\1\0\1\4"+
    "\1\175\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\7\4\1\0\7\4\1\176\1\0\2\4\1\0\7\4"+
    "\2\0\1\4\32\0\1\177\65\0\1\200\101\0\1\201"+
    "\25\0\2\4\24\0\1\4\1\202\5\4\1\0\10\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\3\0\2\4"+
    "\24\0\1\203\6\4\1\0\10\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\3\0\2\4\24\0\7\4\1\0"+
    "\3\4\1\204\4\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\54\0\2\205\14\0\2\4\24\0\7\4\1\0"+
    "\10\4\1\0\2\4\1\205\1\206\6\4\2\0\1\4"+
    "\3\0\2\4\24\0\7\4\1\0\3\4\1\207\4\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\3\0\2\4"+
    "\24\0\7\4\1\0\10\4\1\0\2\4\1\210\1\211"+
    "\6\4\2\0\1\4\3\0\2\4\24\0\3\4\1\212"+
    "\3\4\1\0\10\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\3\0\2\4\24\0\7\4\1\0\3\4\1\213"+
    "\4\4\1\0\2\4\1\0\7\4\2\0\1\4\40\0"+
    "\2\214\30\0\2\4\24\0\7\4\1\214\1\215\7\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\37\0\1\216"+
    "\32\0\2\4\24\0\6\4\1\217\1\0\10\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\7\4\1\0\10\4\1\0\2\4\1\220\7\4\2\0"+
    "\1\4\3\0\1\162\62\0\1\162\3\0\2\4\24\0"+
    "\4\4\1\221\2\4\1\0\10\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\3\0\2\4\24\0\1\222\6\4"+
    "\1\0\10\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\32\0\1\223\37\0\2\4\24\0\1\4\1\224\5\4"+
    "\1\0\10\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\3\0\2\4\24\0\7\4\1\225\1\226\2\4\1\227"+
    "\4\4\1\0\2\4\1\0\7\4\2\0\1\4\3\0"+
    "\2\4\24\0\4\4\1\230\2\4\1\0\10\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\7\4\1\0\3\4\1\231\4\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\35\0\1\232\73\0\1\233\56\0"+
    "\1\234\37\0\2\4\24\0\4\4\1\235\2\4\1\0"+
    "\10\4\1\0\2\4\1\0\7\4\2\0\1\4\3\0"+
    "\2\4\24\0\7\4\1\0\1\4\1\236\6\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\1\4\1\237\5\4\1\0\10\4\1\0\2\4\1\0"+
    "\7\4\2\0\1\4\3\0\2\4\24\0\7\4\1\0"+
    "\5\4\1\240\2\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\54\0\2\241\14\0\2\4\24\0\7\4\1\0"+
    "\10\4\1\0\2\4\1\241\1\242\6\4\2\0\1\4"+
    "\3\0\2\4\24\0\7\4\1\0\10\4\1\243\1\244"+
    "\1\4\1\0\7\4\2\0\1\4\31\0\1\245\40\0"+
    "\2\4\24\0\1\246\6\4\1\0\10\4\1\0\2\4"+
    "\1\0\7\4\2\0\1\4\32\0\1\247\37\0\2\4"+
    "\24\0\4\4\1\250\2\4\1\0\10\4\1\0\2\4"+
    "\1\0\7\4\2\0\1\4\3\0\2\4\24\0\6\4"+
    "\1\251\1\0\10\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\31\0\1\252\40\0\2\4\24\0\1\253\6\4"+
    "\1\0\10\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\3\0\2\4\24\0\7\4\1\254\1\255\7\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\3\0\2\4\24\0"+
    "\1\256\6\4\1\0\10\4\1\0\2\4\1\0\7\4"+
    "\2\0\1\4\3\0\2\4\24\0\1\4\1\257\5\4"+
    "\1\0\10\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\61\0\1\260\52\0\1\261\24\0\2\4\24\0\7\4"+
    "\1\0\10\4\1\0\2\4\1\0\4\4\1\262\2\4"+
    "\2\0\1\4\3\0\2\4\24\0\7\4\1\0\4\4"+
    "\1\263\3\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\3\0\2\4\24\0\7\4\1\0\6\4\1\264\1\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\43\0\1\265"+
    "\26\0\2\4\24\0\7\4\1\0\2\4\1\266\5\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\3\0\2\4"+
    "\24\0\3\4\1\267\3\4\1\0\10\4\1\0\2\4"+
    "\1\0\7\4\2\0\1\4\3\0\2\4\24\0\7\4"+
    "\1\0\10\4\1\0\2\4\1\270\1\271\6\4\2\0"+
    "\1\4\42\0\1\272\27\0\2\4\24\0\7\4\1\0"+
    "\1\4\1\273\6\4\1\0\2\4\1\0\7\4\2\0"+
    "\1\4\31\0\1\274\40\0\2\4\24\0\1\275\6\4"+
    "\1\0\10\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\34\0\1\276\64\0\1\277\37\0\2\4\24\0\3\4"+
    "\1\300\3\4\1\0\10\4\1\0\2\4\1\0\7\4"+
    "\2\0\1\4\3\0\2\4\24\0\1\4\1\301\5\4"+
    "\1\0\10\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\3\0\2\4\24\0\5\4\1\302\1\4\1\0\10\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\32\0\1\303"+
    "\37\0\2\4\24\0\1\4\1\304\5\4\1\0\10\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\32\0\1\305"+
    "\37\0\2\4\24\0\1\4\1\306\5\4\1\0\10\4"+
    "\1\0\2\4\1\0\7\4\2\0\1\4\47\0\1\307"+
    "\50\0\1\310\40\0\2\4\24\0\7\4\1\0\6\4"+
    "\1\311\1\4\1\0\2\4\1\0\7\4\2\0\1\4"+
    "\3\0\2\4\24\0\1\312\6\4\1\0\10\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\43\0\1\313\26\0"+
    "\2\4\24\0\7\4\1\0\2\4\1\314\5\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\32\0\1\315\76\0"+
    "\1\316\27\0\2\4\24\0\1\4\1\317\5\4\1\0"+
    "\10\4\1\0\2\4\1\0\7\4\2\0\1\4\3\0"+
    "\2\4\24\0\7\4\1\0\1\4\1\320\6\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\32\0\1\321\37\0"+
    "\2\4\24\0\1\4\1\322\5\4\1\0\10\4\1\0"+
    "\2\4\1\0\7\4\2\0\1\4\54\0\2\323\14\0"+
    "\2\4\24\0\7\4\1\0\10\4\1\0\2\4\1\323"+
    "\1\324\6\4\2\0\1\4\35\0\1\325\34\0\2\4"+
    "\24\0\4\4\1\326\2\4\1\0\10\4\1\0\2\4"+
    "\1\0\7\4\2\0\1\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8525];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\5\1\3\11\17\1\1\11"+
    "\1\1\1\11\2\1\2\11\2\0\1\1\5\11\7\1"+
    "\3\0\1\11\11\1\1\0\4\1\1\0\1\1\3\0"+
    "\2\1\1\0\2\1\1\0\5\1\2\0\3\1\1\0"+
    "\5\1\1\0\1\1\1\0\5\1\1\0\1\11\2\1"+
    "\1\11\2\1\1\0\4\1\3\0\3\1\1\11\2\1"+
    "\1\0\3\1\1\0\1\1\1\11\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\4\1\1\0\1\11\1\0\4\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\3\1\2\0\3\1\1\11\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\2\0\3\1"+
    "\1\0\1\1\1\11\1\1\2\0\2\1\1\0\1\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
    public static LinkedList<TError> TablaEL = new LinkedList<TError>(); 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
                          TError datos = new TError(yytext(),yyline,yycolumn,"Error Lexico","Simbolo no existe en el lenguaje");
                          TablaEL.add(datos);
            }
          case 60: break;
          case 2: 
            { System.out.println("Reconocio "+yytext()+" CONSTANTE"); return new Symbol(Simbolos.constante, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 3: 
            { System.out.println("Reconocio "+yytext()+" IDENTIFI"); return new Symbol(Simbolos.identifi, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" ABRIRCORCHETE"); return new Symbol(Simbolos.abrircorchete, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 5: 
            { System.out.println("Reconocio "+yytext()+" CERRARCORCHETE"); return new Symbol(Simbolos.cerrarcorchete, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" ABRIRPARENTESIS"); return new Symbol(Simbolos.abrirparentesis, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" CERRARPARENTESIS"); return new Symbol(Simbolos.cerrarparentesis, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" ABRIRLLAVE"); return new Symbol(Simbolos.abrirllave, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" CERRARLLAVE"); return new Symbol(Simbolos.cerrarllave, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" IGUAL"); return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" MAS"); return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 12: 
            { System.out.println("Reconocio "+yytext()+" MENOS"); return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" POR"); return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" DIVISION"); return new Symbol(Simbolos.division, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" PORCETAJE"); return new Symbol(Simbolos.porcentaje, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" MENOR"); return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" MAYOR"); return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()+" NOT"); return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" PUNTOCOMA"); return new Symbol(Simbolos.puntocoma, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 20: 
            { System.out.println("Reconocio "+yytext()+" COMA"); return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" PUNTO"); return new Symbol(Simbolos.punto, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 22: 
            { System.out.println("Reconocio "+yytext()+" GUIONBAJO"); return new Symbol(Simbolos.guionbajo, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 23: 
            { /* Espacios en blanco, se ignoran */
            }
          case 82: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" DOUBLES"); return new Symbol(Simbolos.doubles, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" SimbolosAlaPar"); return new Symbol(Simbolos.simboling, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 26: 
            { System.out.println("Reconocio "+yytext()+" IGUALIGUAL"); return new Symbol(Simbolos.igualigual, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 27: 
            { System.out.println("Reconocio "+yytext()+" COMENTARIOSLINEA"); return new Symbol(Simbolos.comentariolinea, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 28: 
            { System.out.println("Reconocio "+yytext()+" MENORIGUAL"); return new Symbol(Simbolos.menorigual, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 29: 
            { System.out.println("Reconocio "+yytext()+" MAYORIGUAL"); return new Symbol(Simbolos.mayorigual, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" NOTIGUAL"); return new Symbol(Simbolos.notigual, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" AND"); return new Symbol(Simbolos.and, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 32: 
            { System.out.println("Reconocio "+yytext()+" OR"); return new Symbol(Simbolos.or, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 33: 
            { System.out.println("Reconocio "+yytext()+" IF"); return new Symbol(Simbolos.ifing, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 34: 
            { System.out.println("Reconocio "+yytext()+" STRINGES"); return new Symbol(Simbolos.stringesing, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 35: 
            { System.out.println("Reconocio "+yytext()+" NUEVO"); return new Symbol(Simbolos.nuevo, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 36: 
            { System.out.println("Reconocio "+yytext()+" INT"); return new Symbol(Simbolos.interG, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 37: 
            { System.out.println("Reconocio "+yytext()+" FOR"); return new Symbol(Simbolos.foring, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 38: 
            { System.out.println("Reconocio "+yytext()+" HEXADECIMAL"); return new Symbol(Simbolos.hexadecimal, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 39: 
            { System.out.println("Reconocio "+yytext()+" COMENTARIOSLINEAS"); return new Symbol(Simbolos.comentariolineas, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 40: 
            { System.out.println("Reconocio "+yytext()+" NULL"); return new Symbol(Simbolos.nulling, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 41: 
            { System.out.println("Reconocio "+yytext()+" ELSE"); return new Symbol(Simbolos.elseing, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 42: 
            { System.out.println("Reconocio "+yytext()+" THIS"); return new Symbol(Simbolos.thising, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 43: 
            { System.out.println("Reconocio "+yytext()+" BOOL"); return new Symbol(Simbolos.booles, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 44: 
            { System.out.println("Reconocio "+yytext()+" VOID"); return new Symbol(Simbolos.voides, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 45: 
            { System.out.println("Reconocio "+yytext()+" WHILE"); return new Symbol(Simbolos.whileing, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 46: 
            { System.out.println("Reconocio "+yytext()+" IDENT"); return new Symbol(Simbolos.ident, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 47: 
            { System.out.println("Reconocio "+yytext()+" CLASS"); return new Symbol(Simbolos.classing, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 48: 
            { System.out.println("Reconocio "+yytext()+" BREAK"); return new Symbol(Simbolos.breaking, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 49: 
            { System.out.println("Reconocio "+yytext()+" BOOLES"); return new Symbol(Simbolos.boolesing, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 50: 
            { System.out.println("Reconocio "+yytext()+" RETURN"); return new Symbol(Simbolos.returning, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 51: 
            { System.out.println("Reconocio "+yytext()+" DOUBLE"); return new Symbol(Simbolos.doubleG, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 52: 
            { System.out.println("Reconocio "+yytext()+" MALLOC"); return new Symbol(Simbolos.malloc, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 53: 
            { System.out.println("Reconocio "+yytext()+" STRING"); return new Symbol(Simbolos.stringes, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 54: 
            { System.out.println("Reconocio "+yytext()+" EXTENDS"); return new Symbol(Simbolos.exetndsing, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 55: 
            { System.out.println("Reconocio "+yytext()+" NUEVOARREGLO"); return new Symbol(Simbolos.nuevoarreglo, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 56: 
            { System.out.println("Reconocio "+yytext()+" LEERLINEA"); return new Symbol(Simbolos.leerlinea, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 57: 
            { System.out.println("Reconocio "+yytext()+" INTERFACE"); return new Symbol(Simbolos.interfaceing, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 58: 
            { System.out.println("Reconocio "+yytext()+" IMPLEMENTS"); return new Symbol(Simbolos.implementsing, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 59: 
            { System.out.println("Reconocio "+yytext()+" LEERINT"); return new Symbol(Simbolos.leerint, yycolumn, yyline, yytext());
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
